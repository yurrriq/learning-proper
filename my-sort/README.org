#+OPTIONS: title:nil toc:t num:0 author:t
#+TITLE: my-sort
#+SUBTITLE: LFE translation of the "PropEr introduction to Property-Based Testing."
#+DATE: <2015-12-19 Sat>
#+AUTHOR: Eric Bailey
#+LANGUAGE: en
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.2)

* PropL Introduction to Property-Based Testing
  :PROPERTIES:
  :noweb:    yes
  :session:  my-sort
  :END:
An [[https://github.com/rvirding/lfe][LFE]] (and [[https://github.com/quasiquoting/propl][PropL]]) translation of Kostis Sagonas's [[http://proper.softlab.ntua.gr/Tutorials/PropEr_introduction_to_Property-Based_Testing.html][PropEr introduction to
Property-Based Testing]].

** ~(defun sort ...)~
   :PROPERTIES:
   :exports:  both
   :results:  silent
   :END:
Define the [[http://algs4.cs.princeton.edu/23quicksort/][quicksort]]​-inspired ~sort/1~.
#+NAME: sort
#+BEGIN_SRC lfe
;; -spec sort([T]) -> [T].
(defun sort
  (['()] '())
  ([`(,p . ,xs)]
   (++ (sort (lc ((<- x xs) (< x p)) x))
       `(,p)
       (sort (lc ((<- x xs) (< p x)) x)))))
#+END_SRC

** Examples
   :PROPERTIES:
   :exports:  both
   :END:
Try a few examples.
#+NAME: example-1
#+BEGIN_SRC lfe
(sort '[17 42])
#+END_SRC

#+NAME: example-2
#+BEGIN_SRC lfe
(sort '[42 17])
#+END_SRC

#+NAME: example-3
#+BEGIN_SRC lfe
(sort '[3 1 4 2])
#+END_SRC

** Unit Tests
In order to include the EUnit headers and use ~deftest~ and ~deftestgen~,
include the [[https://github.com/lfex/ltest][ltest]] macros.
#+NAME: ltest-macros
#+BEGIN_SRC lfe
(include-lib "ltest/include/ltest-macros.lfe")
#+END_SRC

For ~->~ and ~->>~, include [[https://github.com/lfex/clj][clj]]'s composition macros.
#+NAME: clj-compose
#+BEGIN_SRC lfe
(include-lib "clj/include/compose.lfe")
#+END_SRC

To make writing tests more succinct, define a helper function, ~expect/2~ that
takes an ~expected~ result and a list ~to-sort~ (or those same values, wrapped
in tuples, preceded by a title) and returns an [[http://www.erlang.org/doc/apps/eunit/chapter.html#Titles][annotated test]].
#+NAME: expect
#+BEGIN_SRC lfe
(defun expect
  "Given an `expected` result and a list `to-sort`, return an annotated test.

`expected` and `to-sort` may also be wrapped in tuples, preceded by titles.
If no titles are given, generate them with [[when-sorted/2]]."
  ([`#(,expected-title ,expected) `#(,to-sort-title ,to-sort)]
   `#(,(when-sorted to-sort-title expected-title)
      ,(_assertEqual expected (sort to-sort))))
  ([expected to-sort]
   (expect `#(,expected ,expected) `#(,to-sort ,to-sort))))
#+END_SRC

~when-sorted/2~, when given terms ~x~ and ~y~ returns a string like =​"x when
sorted is equal to y."​= where ~x~ and ~y~ are [[https://github.com/rvirding/lfe/blob/develop/src/lfe_io_pretty.erl][pretty printed]] (unless strings).
#+NAME: when-sorted
#+BEGIN_SRC lfe
(defun when-sorted (x y)
  "Given terms `x` and `y`, return a test title."
  (->> (-> (lambda (x) (if (clj-p:string? x) x (lfe_io_pretty:term x)))
           (lists:map `(,x ,y)))
       (io_lib:format "~s, when sorted, is equal to ~s.")
       (lists:flatten)))
#+END_SRC

*** ~(deftestgen sort ...)~
#+NAME: unit-tests
#+BEGIN_SRC lfe
(deftestgen sort `[,(test_zero) ,(test_two) ,(test_four)])

(defun test_zero () (expect #("the empty list" []) #("The empty list" [])))

(defun test_two ()
  (lc ((<- `#(,x ,y) '[#(17 42) #(42 17)]))
    (expect '[17 42] `(,x ,y))))

(defun test_four () (expect '[1 2 3 4] '[3 1 4 2]))
#+END_SRC

N.B. EUnit gets very upset with kebab case, so use snake for test generators

** Property Tests
#+NAME: properties
#+BEGIN_SRC lfe :exports none
<<prop_ordered>>

;; N.B. This property is known not to hold, so it's neither exported,
;;      nor included in the EUnit tests.
<<prop_same_length>>

<<prop_same_length_conditional_check>>

<<prop_same_length_distinct>>

<<list-distinct>>

<<prop_equiv_usort>>
#+END_SRC

Now, for some property-based testing!
#+NAME: proper-hrl
#+BEGIN_SRC lfe
(include-lib "proper/include/proper.hrl")
#+END_SRC

N.B. This needs to come *before* including =eunit.hrl= since [[http://proper.softlab.ntua.gr/User_Guide.html#using_proper_in_conjunction_with_eunit][they both define
some macros with the same names]].

For convenience, include the [[https://github.com/quasiquoting/propl/blob/master/include/propl-macros.lfe][propl macros]].
#+NAME: propl-macros
#+BEGIN_SRC lfe
(include-lib "propl/include/propl-macros.lfe")
#+END_SRC

To ensure the following examples work, ~slurp~ the [[*The Finished ~my-sort~ Module][tangled module]].
#+NAME: slurp
#+BEGIN_SRC lfe :exports both :results silent
(slurp "src/my-sort.lfe")
#+END_SRC

*** ~(defprop ordered ...)~
Define the ~ordered~ property.
#+NAME: prop_ordered
#+BEGIN_SRC lfe
(defprop ordered
  (FORALL xs (list-of (integer)) (ordered (sort xs))))
#+END_SRC

#+NAME: ordered
#+BEGIN_SRC lfe
(defun ordered
  (['()]           'true)
  ([`(,_)]         'true)
  ([`(,a ,b . ,t)] (andalso (=< a b) (ordered `(,b . ,t)))))
#+END_SRC

Check ~prop_ordered~.
#+NAME: quickcheck-prop_ordered
#+BEGIN_SRC lfe :exports both :results output
(proper:quickcheck (prop_ordered))
#+END_SRC

There also exists ~proper:quickcheck/2~ which accepts an option or list of
options, namely a number of tests (~numtests~) to run when testing a property.
#+NAME: quickcheck-prop_ordered-some-more
#+BEGIN_SRC lfe
(proper:quickcheck (prop_ordered) 4711)
#+END_SRC
N.B. Evaluating the form above will take a while and print 4711 =.= before =OK=
or =Failed=.

*** ~(defprop same-length ...)~
Define the ~same-length~ property.
#+NAME: prop_same_length
#+BEGIN_SRC lfe
(defprop same-length ()
  (FORALL xs (any-list) (=:= (length xs) (length (sort xs)))))
#+END_SRC

Check ~prop_same_length~ and watch it fail and shrink.
#+NAME: quickcheck-prop_same_length
#+BEGIN_SRC lfe :exports both
(proper:quickcheck (prop_same_length))
#+END_SRC

#+RESULTS: quickcheck-prop_same_length
: ............!
: Failed: After 13 test(s).
: [[],{-11,{}},[],<<254,196>>]
:
: Shrinking ..(2 time(s))
: [[],[]]
: false

Confirm the failures.
#+NAME: same_length-failure-1
#+BEGIN_SRC lfe :exports both
(sort '[[] #(-11 #()) [] #b(254 196)])
#+END_SRC

#+NAME: same_length-failure-2
#+BEGIN_SRC lfe :exports both
(sort '[[] []])
#+END_SRC

*** ~(defprop same-length-conditional-check ...)~
Define the ~same-length-conditional-check~ property.
#+NAME: prop_same_length_conditional_check
#+BEGIN_SRC lfe
(defprop same-length-conditional-check
  (FORALL xs (list-of (integer))
          (IMPLIES (distinct? xs) (=:= (length xs) (length (sort xs))))))
#+END_SRC

Define the ~unless~ macro, as seen in Common Lisp and Scheme.
#+NAME: unless
#+BEGIN_SRC lfe
(defmacro unless
  (`[,test . ,body] `(if ,test 'false (progn ,@body))))
#+END_SRC

Define the ~distinct?/1~ predicate, which given a list, returns ~​'true~ iff
its elements are distinct.
#+NAME: distinct?
#+BEGIN_SRC lfe
;; Shout out to Clojure!
(defun distinct?
  (['()]      'true)
  ([`(,_)]    'true)
  ([`(,x ,y)] (/= x y))
  ([`(,x ,y . ,more)]
   (if (/= x y)
     (-distinct? (sets:from_list `(,x ,y)) more)
     'false)))

(defun -distinct?
  ([_seen '()]  'true)
  ([seen `(,x . ,xs)]
   (unless (sets:is_element x seen)
     (-distinct? (sets:add_element x seen) xs))))
#+END_SRC

Check ~prop_same_length_conditional_check~.
#+NAME: quickcheck-prop_same_length_conditional_check
#+BEGIN_SRC lfe :exports both
(proper:quickcheck (prop_same_length_conditional_check))
#+END_SRC

*** ~(defprop same-length-distinct ...)~
Define the ~same-length-distinct~ property.
#+NAME: prop_same_length_distinct
#+BEGIN_SRC lfe
(defprop same-length-distinct
  (FORALL xs (list-distinct (integer))
          (=:= (length xs) (length (sort xs)))))
#+END_SRC

Define the ~list-distinct~ generator.
#+NAME: list-distinct
#+BEGIN_SRC lfe
(defun list-distinct (type)
  (prop-let xs (list-of type) (distinct xs)))
#+END_SRC

Define ~distinct/1~, which given a list ~xs~, returns a list of the elements of
~xs~ with duplicates removed.
#+NAME: distinct
#+BEGIN_SRC lfe
(defun distinct
  (['()] '())
  ([xs]  (-distinct xs (sets:new))))

(defun -distinct
  (['() _seen] '())
  ([`(,x . ,xs) seen]
   (if (sets:is_element x seen)
     (-distinct xs seen)
     `(,x . ,(-distinct xs (sets:add_element x seen))))))
#+END_SRC

Check ~prop_same_length_distinct~.
#+NAME: quickcheck-prop_same_length_distinct
#+BEGIN_SRC lfe :exports both
(proper:quickcheck (prop_same_length_distinct))
#+END_SRC

*** ~(defprop equiv-usort ...)~
Define the ~equiv-usort~ property, which checks that ~sort/1~ is equivalent to
~lists:usort/1~.
#+NAME: prop_equiv_usort
#+BEGIN_SRC lfe
(defprop equiv-usort
  (FORALL xs (list-of (integer)) (=:= (sort xs) (lists:usort xs))))
#+END_SRC

Check ~prop_equiv_usort~.
#+NAME: quickcheck-prop_equiv_usort
#+BEGIN_SRC lfe :exports both
(proper:quickcheck (prop_equiv_usort))
#+END_SRC

*** ~(deftestgen properties ... )~
Define [[http://erlang.org/doc/apps/eunit/chapter.html][EUnit]] tests that check the previously defined properties, excluding
~prop_same_length~, which is known not to hold.

N.B. Since [[http://erlang.org/doc/apps/eunit/chapter.html#Running_EUnit][EUnit captures standard output]], we use ~proper:quickcheck/2~ with
~​'[#(to_file user)]~ to [[http://proper.softlab.ntua.gr/User_Guide.html#using_proper_in_conjunction_with_eunit][make PropEr properties visible when invoked from EUnit]].

Define the ~properties~ test generator, which checks the desired properties.
#+NAME: properties-testgen
#+BEGIN_SRC lfe
(deftestgen properties
  (let ((opts  '[#(to_file user)])
        (tests `(#("Each element in a sorted list is less than or equal to its successor."
                   ,(prop_ordered))
                 #("Every list of integers, if its elements are distinct, has the same length as itself sorted."
                   ,(prop_same_length_conditional_check))
                 #("Every list of distinct integers has the same length as itself sorted."
                   ,(prop_same_length_distinct))
                 #("my-sort:sort/1 is equivalent to lists:usort/1."
                   ,(prop_equiv_usort)))))
    (lc ((<- `#(,title ,prop) tests))
      `#(,title ,(_assert (proper:quickcheck prop '[#(to_file user)]))))))
#+END_SRC

** The Finished ~my-sort~ Module
Define the ~my-sort~ module and save ([[./ob-lfe.el][tangle]]) it to [[./src/my-sort.lfe][src/my-sort.lfe]] by pressing
=C-c C-v t= or =C-c C-v C-t=.

Compile the finished module.
#+NAME: rebar3-compile
#+BEGIN_SRC sh
rebar3 compile
#+END_SRC

*** =noweb= Magic
    :PROPERTIES:
    :exports:  none
    :END:
Open [[file:README.org][README.org]] in Emacs to look [[http://www.criticalcommons.org/Members/pcote/clips/the_wizard_of_oz-title1_2.mp4/view][behind the curtain]].

#+NAME: internal-functions
#+BEGIN_SRC lfe :exports none
<<unless>>

<<distinct>>

<<distinct?>>

<<expect>>

<<ordered>>

<<when-sorted>>
#+END_SRC

#+NAME: export-api
#+BEGIN_SRC lfe
;; API
(export (sort 1))
#+END_SRC

#+NAME: export-eunit-tests
#+BEGIN_SRC lfe
;; EUnit tests
(export (properties_test_ 0) (sort_test_ 0))
#+END_SRC

#+NAME: export-property-tests
#+BEGIN_SRC lfe
;; Property tests
(export (prop_ordered 0)
        ;; prop_same_length deliberately excluded
        (prop_same_length_conditional_check 0)
        (prop_same_length_distinct 0)
        (prop_equiv_usort 0))
#+END_SRC

#+NAME: import-helper-functions
#+BEGIN_SRC lfe
;; Import Prop{Er,L} helper functions
(import (from proper_types (integer 0))
        (from propl        (any-list 0) (list-of 1)))
#+END_SRC

#+NAME: includes
#+BEGIN_SRC lfe
<<proper-hrl>>

<<propl-macros>>

<<ltest-macros>>

<<clj-compose>>
#+END_SRC

#+NAME: my-sort
#+BEGIN_SRC lfe :tangle src/my-sort.lfe
(defmodule my-sort
  <<export-api>>
  <<export-property-tests>>
  <<export-eunit-tests>>
  <<import-helper-functions>>)

;;;===================================================================
;;; Includes
;;;===================================================================

<<includes>>


;;;===================================================================
;;; API
;;;===================================================================

<<sort>>


;;;===================================================================
;;; Property Tests
;;;===================================================================

<<properties>>

<<properties-testgen>>


;;;===================================================================
;;; Unit Tests
;;;===================================================================

<<unit-tests>>


;;;===================================================================
;;; Internal Functions
;;;===================================================================

<<internal-functions>>
#+END_SRC

** Running Properties Tests
To check the properties defined in a particular module, use
~proper:module/{1,2}~.

#+NAME: proper-module-my-sort
#+BEGIN_SRC lfe :exports both
(proper:module 'my-sort)
#+END_SRC

** Running the EUnit Tests
Run the EUnit tests in an LFE shell.
#+NAME: eunit-test
#+BEGIN_SRC lfe :exports both
(eunit:test 'my-sort '[verbose])
#+END_SRC

Run the EUnit tests with [[http://www.rebar3.org][rebar3]].
#+NAME: rebar3-eunit
#+BEGIN_SRC sh :exports code
rebar3 eunit -v
#+END_SRC
